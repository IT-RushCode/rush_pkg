APP:
  APP_ENV: "local"
  APP_DEBUG: true
  APP_NAME: ""
  APP_HOST: "localhost"
  APP_PORT: ":8000"
  APP_MAX_CONNECTION: 100
  DATETIME: ""
  DATE: ""
  TIME: ""

DB:
  DBHOST: "localhost"
  DBPORT: 5432
  DBUSER: "postgres"
  DBPASS: "postgres"
  DBNAME: "postgres"
  CHARSET: ""

REDIS:
  RD_HOST: "localhost"
  RD_PORT: ":6379"
  RD_PASS: ""
  RD_DB: 0

JWT:
  JWT_SECRET: ""
  JWT_TTL: 3600
  REFRESH_TTL: 604800

KAFKA:
  HOST1: ""
  HOST2: ""
  HOST3: ""

RABBITMQ:
  URI: "amqp://guest:guest@localhost:5672/"

MONGODB:
  DB: "HOTS"
  URI: "mongodb://localhost:27017"

APISMS:
  API: ""
  SENDER: ""

MAIL:
  SMTP_HOST: "smtp.example.com" # хост smtp сервера
  SMTP_PORT: 587 # порт smtp сервера
  SMTP_USER: "your-email@example.com" # пользователь smtp сервера
  SMTP_PASSWORD: "your-email-password" # пароль smtp сервера
  SENDER_EMAIL: "no-reply@example.com" # от чьего имени отправляется почта
  SENDER_NAME: "Example App" # имя отправителя

FIBER:
  # Если установлено в true, это приведет к запуску нескольких процессов Go,
  # прослушивающих один и тот же порт.
  Prefork: false

  # Включает HTTP заголовок "Server: value".
  ServerHeader: ""

  # Если установлено в true, маршрутизатор будет считать "/foo" и "/foo/" разными маршрутами.
  # По умолчанию это отключено, и "/foo" и "/foo/" будут выполнять один и тот же обработчик.
  StrictRouting: false

  # Если установлено в true, маршрутизация будет учитывать регистр символов.
  # Например, "/FoO" и "/foo" считаются разными маршрутами.
  # По умолчанию это отключено, и "/FoO" и "/foo" будут выполнять один и тот же обработчик.
  CaseSensitive: false

  # Когда установлено в true, это освобождает память в некоторых случаях, чтобы получить значения обработчика
  # (например, тела запроса) в неизменном виде, чтобы эти значения были доступны, даже если вы вернетесь
  # из обработчика.
  Immutable: false

  # Когда установлено в true, это преобразует все закодированные символы в маршруте обратно
  # перед установкой пути для контекста, так что маршрутизация,
  # возврат текущего URL из контекста `ctx.Path()` и параметры `ctx.Params(%key%)` будут работать
  # с декодированными символами.
  UnescapePath: false

  # Включает или отключает генерацию заголовков ETag, поскольку как слабые, так и сильные etags генерируются
  # с использованием одного и того же метода хеширования (CRC-32). Слабые ETag по умолчанию при включении.
  ETag: false

  # Максимальный размер тела, который сервер принимает.
  # -1 отклоняет любой размер тела
  BodyLimit: 4194304 # 4 MB по умолчанию

  # Максимальное количество одновременных соединений.
  Concurrency: 262144 # 256 * 1024

  # Количество времени, разрешенное для чтения полного запроса, включая тело.
  # Оно сбрасывается после того, как обработчик запроса вернулся.
  ReadTimeout: 0 # Не ограничено

  # Максимальная продолжительность до истечения времени при записи ответа.
  # Оно сбрасывается после того, как обработчик запроса вернулся.
  WriteTimeout: 0 # Не ограничено

  # Максимальное время ожидания следующего запроса, когда keep-alive включен.
  # Если IdleTimeout равно нулю, используется значение ReadTimeout.
  IdleTimeout: 0 # Не ограничено

  # Размер буфера на подключение для чтения запросов.
  # Это также ограничивает максимальный размер заголовка.
  # Увеличьте этот буфер, если ваши клиенты отправляют многокилобайтные RequestURI
  # и/или многокилобайтные заголовки (например, большие куки).
  ReadBufferSize: 4096

  # Размер буфера на подключение для записи ответов.
  WriteBufferSize: 4096

  # Суффикс для сжатых файлов. Добавляется к имени исходного файла.
  CompressedFileSuffix: ".fiber.gz"

  # Если установлено в true, отключает keep-alive соединения.
  # Сервер закроет входящие соединения после отправки первого ответа клиенту.
  DisableKeepalive: false

  # Если установлено в true, исключает стандартный заголовок даты из ответа.
  DisableDefaultDate: false

  # Если установлено в true, исключает стандартный заголовок Content-Type из ответа.
  DisableDefaultContentType: false

  # Если установлено в true, отключает нормализацию заголовков.
  # По умолчанию все имена заголовков нормализуются: conteNT-tYPE -> Content-Type.
  DisableHeaderNormalizing: false

  # Если установлено в true, не будет выводиться ASCII-арт «Fiber» и адрес прослушивания.
  DisableStartupMessage: false

  # Эта функция позволяет настроить имя приложения.
  AppName: ""

  # StreamRequestBody включает потоковую передачу тела запроса,
  # и вызывает обработчик раньше, когда переданное тело больше текущего лимита.
  StreamRequestBody: false

  # Не будет предварительно разбирать Multipart Form данные, если установлено в true.
  # Эта опция полезна для серверов, которые хотят обрабатывать
  # multipart form данные как бинарный объект, или решать, когда разбирать данные.
  DisablePreParseMultipartForm: false

  # Агрессивно снижает использование памяти за счет большего использования ЦП,
  # если установлено в true.
  # Попробуйте включить эту опцию только если сервер потребляет слишком много памяти,
  # обслуживая в основном неактивные keep-alive соединения. Это может снизить использование памяти
  # более чем на 50%.
  ReduceMemoryUsage: false

  # FEATURE: v2.3.x
  # Маршрутизатор выполняет один и тот же обработчик по умолчанию, если StrictRouting или CaseSensitive отключены.
  # Включение RedirectFixedPath изменит это поведение на клиентский редирект к исходному пути маршрута.
  # Использует статус-код 301 для GET запросов и 308 для всех остальных методов запросов.
  RedirectFixedPath: false

  # Известные сети: "tcp", "tcp4" (только IPv4), "tcp6" (только IPv6)
  # ВНИМАНИЕ: Когда Prefork установлен в true, можно выбрать только "tcp4" и "tcp6".
  Network: "tcp4"

  # Если вы находитесь за прокси, таком как балансировщик нагрузки,
  # определенная информация заголовка может быть отправлена вам с помощью специальных заголовков X-Forwarded-* или заголовка Forwarded.
  # Например, заголовок HTTP Host обычно используется для возврата запрашиваемого хоста.
  # Но когда вы находитесь за прокси, фактический хост может быть сохранен в заголовке X-Forwarded-Host.
  # Если вы находитесь за прокси, вам следует включить TrustedProxyCheck, чтобы предотвратить подделку заголовков.
  # Если вы включите EnableTrustedProxyCheck и оставите TrustedProxies пустым, Fiber пропустит
  # все заголовки, которые могут быть подделаны.
  # Если IP-адрес запроса находится в списке TrustedProxies, то:
  #   1. c.Protocol() получает значение из заголовка X-Forwarded-Proto, X-Forwarded-Protocol, X-Forwarded-Ssl или X-Url-Scheme
  #   2. c.IP() получает значение из заголовка ProxyHeader.
  #   3. c.Hostname() получает значение из заголовка X-Forwarded-Host.
  # Но если IP-адрес запроса НЕ находится в списке Trusted Proxies:
  #   1. c.Protocol() НЕ будет получать значение из заголовка X-Forwarded-Proto, X-Forwarded-Protocol, X-Forwarded-Ssl или X-Url-Scheme,
  #    вернет https, если TLS соединение обрабатывается приложением, иначе http.
  #   2. c.IP() НЕ будет получать значение из заголовка ProxyHeader, вернет RemoteIP() из контекста fasthttp.
  #   3. c.Hostname() НЕ будет получать значение из заголовка X-Forwarded-Host, будет использовать fasthttp.Request.URI().Host()
  #    для получения имени хоста.
  EnableTrustedProxyCheck: false

  # Список доверенных прокси.
  TrustedProxies: []

  # Если установлено в true, c.IP() и c.IPs() будут проверять IP-адреса перед их возвратом.
  EnableIPValidation: true

  # Если установлено в true, будет выводить все маршруты с их методом, путем и обработчиком.
  EnablePrintRoutes: true

  # Используемый заголовок для получения IP-адреса, если вы находитесь за прокси.
  ProxyHeader: "X-Forwarded-For"

  # Отказывает все запросы, кроме GET, если установлено в true.
  GETOnly: false

  # Пользовательские HTTP методы. Вы можете добавлять/удалять методы по мере необходимости.
  RequestMethods: ["GET", "HEAD", "POST", "PUT", "PATCH", "DELETE"]

  # Включает разбиение параметров запроса/тела/заголовков по запятой.
  EnableSplittingOnParsers: false
